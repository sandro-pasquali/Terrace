"use strict";

module.dependencies = [
    "styles",
    "store",
    "data",
    "bits"
];
module.exports      = function(options) {

options = options || {};

var	$	= this;
var $j	= jQuery;

//  Last bit in which a focus event occurred
//
var LAST_BIT_FOCUS;

//  Last bit in which a mouseenter event occurred
//
var LAST_BIT_ENTER;

//	Variously generated by %client calls (esp. POST)
//
var LAST_TRANSACTION_ID;

//  Each client needs one of these.
//
var CLIENT_ID   = "";

//  Each authenticated client needs one of these.
//
var FINGERPRINT = "";

//  Successful responses should have an #env property, which we store.
//
var ENVIRONMENT = {};

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//					NEED TO ADD SOME SCHTUFF TO SET THE PAGE UP CORRECTLY                   //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////

var head 			= document.getElementsByTagName('head')[0];
var firstHeadChild 	= head.childNodes.item(0);

$.each([{
	"http-equiv"	: "content-type",
	"content"		: "text/html; charset=utf-8"
}, {
	"http-equiv"	: "content-script-type",
	"content"		: "text/javascript"
}, {
	"name"			: "viewport",
	"content"		: "width=device-width, user-scalable=no, initial-scale=1.0"
}, {
	"http-equiv"	: "X-UA-Compatible",
	"content"		: "IE=edge" //"IE=EmulateIE9"
}], function(m) {
	var meta = document.createElement('meta');
	meta.setAttribute("http-equiv", m["http-equiv"] || "");
	meta.setAttribute("content", m["content"] || "");
	meta.setAttribute("name", m["name"] || "");
	head.insertBefore(meta, firstHeadChild);
});

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//                                  ONLINE/OFFLINE                                          //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////

//	Online/offline checking, every 10 seconds. Some browsers do not support this, in which
//	case no notifications of state change will be published.
//
var winNav 		= window.navigator || { onLine	: true };
var isOnLine 	= true;
var checkOnLine = function() {
	if(isOnLine !== winNav.onLine) {
		$.publish(isOnLine ? ".offline" : ".online");
		isOnLine = !!winNav.onLine;
	}
	setTimeout(checkOnLine, 1000);
};
checkOnLine();

$.subscribe(".online", function(d) {
    $.notify("You are now online.", "announce");
});
$.subscribe(".offline", function(d) {
    $.notify("You have gone offline.", "alert");
});

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//                                  JQUERY SETUP                                            //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////

//	#reverse will reverse an array (usually the #jQuery collection).
//  All Ajax calls will set the necessary security headers.  Note that the values
//	are dynamic, in that should the environment change the functionality will maintain.
//	@fingerprint is read on each response, and if the @fingerprint has been
//	changed by our server it will be updated.
//
$j.fn.reverse = [].reverse;

//	Set up some default handlers for xhr requests. Note that these can be overridden when
//	building your own ajax requests.
//
$j.ajaxSetup({
    "beforeSend"	: function(xhr) {
        xhr.setRequestHeader("fingerprint", FINGERPRINT);
        xhr.setRequestHeader("client_id", CLIENT_ID);
        xhr.setRequestHeader("transaction_id", $.uuid());
    },
    "error" 		: function(xhr, strError) {
        // 	http://stackoverflow.com/questions/1023867/jquery-xmlhttprequest-error
        //
        if(xhr.readyState === 0 || xhr.status === 0) {
            return;
        }

		$.publish(".ajaxerror", $.argsToArray(arguments));
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//                                  KEYBOARD WATCHER                                  		//
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////

//  Global keypress notification. You can always write your own bit-level handlers.
//
$j(document.body).on("keypress", function(ev) {
    $.publish(".keyup", ev);
});

//  Whenever a mouseenter or focus event occurs on a bit update LAST_BIT_FOCUS/ENTER.
//
/*
$j(document.body).on("mouseenter mouseleave focusin focusout", ".bits", function(ev) {
    var b = $.bits.$get(ev.currentTarget.id)
    switch(ev.type) {
        case "mouseenter":
            LAST_BIT_ENTER = b;
        break;
        case "mouseleave":
            LAST_BIT_ENTER = null;
        break;
        case "focusin":
            LAST_BIT_FOCUS = b;
        break;
        case "focusout":
            LAST_BIT_FOCUS = null;
        break;
        default:
        break;
    }
});
*/
//	Publish a special bit-focused event when a key press happens in a bit scope.
//
$.subscribe(".keyup", function(ev) {
	var ob = LAST_BIT_ENTER || LAST_BIT_FOCUS;
    if(ob) {
        //console.log("KEYUP: last was > " + ob.id);
        $.publish("keyup:" + ob.id , LAST_BIT_ENTER ? "enter" : "focus");
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//                                  GENERAL SUBSCRIBERS                                     //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////


//	Reporting of Ajax errors.
//
//	[0] => xhr object.
//	[1] => string, error type.
//
$.subscribe(".ajaxerror", function(d) {
	$.error(d[2] + " with status code: " + d[0].status, "Ajax Error");
    //.notify(d[1] + " with status code: " + d[0].status,"error","Ajax Error");
});

//  When a bit has initialized.
//
$.subscribe(".bitLoaded", function(bit) {
    console.log("bit loaded: " + bit.name + " -> " + bit.id);
});

/*
$.styles.createSheet('body {opacity: .0; filter	: alpha(opacity=0);-ms-filter : "alpha(opacity=0)";-khtml-opacity: .0;-moz-opacity	: .0;}');
$.subscribeOnce("bind:complete", function() {
	//	The <body> (the ui) is hidden until ready. When ready, fade it in.
	//	@see	UI/style/css/global.css#body
	 //
	 $j('body').fadeTo(1000, 1);
});
*/

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
//                                  THE CLIENT KIT                                          //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////

var makeCall    = function(method, url, cb, opts) {
    opts = opts || {};

    opts.type 		= method;
    opts.timeout	= opts.timeout || $.data.$get("maximumXhrCallTime");

    return $j.ajax(url, opts).always(function(data, success, xhr) {

    	if(success !== "success") {
    		return cb && cb(true);
    	}

        var fp  = xhr.getResponseHeader("fingerprint");
        var cid = xhr.getResponseHeader("client_id");
        var tid	= xhr.getResponseHeader("transaction_id");

        //	This is a good notification to turn on.
        //
        if(!cid) {
            $.notify("The server did not send proper credentials. This will negatively impact your experience.", "announce");
        }

        if(fp !== FINGERPRINT) {
            FINGERPRINT = fp;
        }
        if(cid !== CLIENT_ID) {
            CLIENT_ID = cid;
        }

        if($.is(Object, data)) {
			ENVIRONMENT = data.env || {};
        }

        cb && cb(null, data, tid);
    });
};

$.addKit("client", {

	//	The typical HTTP post.
	//
    "post"       : function(url, data, cb, opts) {
    	opts = opts || {};
    	opts.data = data || {};
        return makeCall("POST", url, cb, opts);
    },

	//	This will expect and only fetch json.
	//
    "json"      : function(url, cb, opts) {
    	var opts = opts || {};
    	opts.dataType 	= "json";
        return makeCall("GET", url, cb, opts);
    },

	//	Pure data request, on the server model.
	//	This is *not* a typical HTTP get.
	//
    "get"  	: function(key, path, cb) {
        return makeCall("GET", "/get/" + key + "/" + path, cb, opts);
    },

	//	Set a value on the server model.
	//
    "set"  	: function(key, path, value, cb) {
        return makeCall("POST", "/set/" + key + "/" + path, cb, opts);
    },

	//	Check the status of a transaction. You will need to have a transactionId.
	//
    "transaction"  : function(transactionId, cb, opts) {
		return makeCall("GET", "/transaction/" + transactionId, cb, opts);
    },

	//	Register this client, which primarily means getting a client_id.
	//
	//	@see	#makeCall
	//
    "register"	: function(cb) {
		$.client.json("/registerClient", function(err, data) {
			if(err) {
			    return $.error("Unable to register client.");
			}

			data = data || {};

			//	Store globals, instantiating any RegExp's
			//
			var globals = data.body;
			var k;

			for(k in globals) {
				if(k.indexOf("regexp_") === 0) {
					globals[k] = Function("a", "a = a || '';" + globals[k]);
				}
			}

			$.data.set("globals", globals);

			cb();
		});
    }
});

//	Register the client, and bind. This is essential, as until the client is bound it
//	cannot communicate usefully with the server (no client_id), and it has no
//	#ENVIRONMENT information, which is needed. Do not remove, and run it first.
//
//	Note that having a client_id has nothing to do with being authenticated (you aren't).
//
//	Note that the the autobind functionality can be overridden (set to false).
//
$.client.register(function() {
	if(options.autobind === void 0 || !!options.autobind !== false) {
		$.dom.ready(function() {
			$.bits.bind();
		});
	}
});

return $.client;

}; // end exports / function